import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackContext
import requests
from dotenv import load_dotenv
import os

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ================================================================

load_dotenv()

bot_token = os.getenv("TG_TOKEN")

# ================================================================

def search_anime(query):
    api_url = "https://api.anilibria.tv/v2/searchTitles"
    params = {
        "search": query,
        "limit": 5
    }
    try:
        response = requests.get(api_url, params=params)
        response.raise_for_status()
    except requests.RequestException as e:
        logger.error(f"Error fetching data from Anilibria API: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    results = response.json()
    if not results:
        return "–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    reply = "<b>–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∞–Ω–∏–º–µ:</b>\n\n"
    for result in results:
        title = result['names']['ru']
        link = f"<a href='https://www.anilibria.tv/release/{result['code']}.html'>{title}</a>"
        reply += f"üîπ {link}\n\n"

    return reply if reply else "–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_html('–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –Ω–∞–π—Ç–∏ –∞–Ω–∏–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>/search –Ω–∞–∑–≤–∞–Ω–∏–µ_–∞–Ω–∏–º–µ</b>, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫.')

async def search(update: Update, context: CallbackContext) -> None:
    query = ' '.join(context.args)
    if not query:
        await update.message.reply_html('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ –¥–ª—è –ø–æ–∏—Å–∫–∞.')
        return

    result = search_anime(query)
    await update.message.reply_html(result)

def main() -> None:
    BOT_TOKEN = f'{bot_token}'

    app = ApplicationBuilder().token(BOT_TOKEN).build() 

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("search", search))

    app.run_polling()


if __name__ == '__main__':
    main()